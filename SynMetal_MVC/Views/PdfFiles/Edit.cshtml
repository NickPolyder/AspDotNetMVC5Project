@model SynMetal_MVC.Models.PdfFile

@{

    ViewBag.Title = "Edit";
    // Session.Add("EditID", Model.PdfId);
    Session.Add("EditUrl", SynMetal_MVC.Models.PhotoEdit.EditProduct);
    Session.Add("FromEditPDF", true);

}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "PdfFiles", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PdfFile</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PdfId)
       
         @if(ViewBag.Errors != null)
                {
                    foreach (string Err in ViewBag.Errors)
                    {
                <div class="text-danger">
                    @Err
                </div>
            }
        }
        <div class="form-group">
          
            <div class="col-md-10">
                <a href="@Url.Content(Model.FilePath)" target="_blank" class="btn btn-info">Open File</a>
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Upload another PDF (The old one its going to be deleted!!)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Partial("Partial/_PdfUpEdDel")
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PDFCategories", String.Empty)
                @Html.ValidationMessageFor(model => model.Category)
                @if (ViewBag.PdfCatError != null)
                {
                    <p class="text-danger">@ViewBag.PdfCatError</p>
                }
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Pdf Files", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/clientFunc")
}
